#include <TokenCommon.h>
#include <windows.h>

void U256Test()
{
	// 测试构造
	u256 a(1419857);
	VF("construction1", a.str() == string("1419857"));
	u256 b("1419857");
	VF("construction2", a == b);
	u256 c(-3);
	VF("construction3", c.is_minus());

	// 测试字符串转换
	a = "1419857";
	int ii = (int)a;
	VF("from string & convert int", ii == 1419857);
	long ll = (long)a;
	VF("convert long", ll == 1419857);

	u256 a1 = "4574398584985738934587";
	VF("decode base10", a1.str() == string("4574398584985738934587"));

	u256 a2 = "27473847347383483";
	VF("decode base10", a2.str() == string("27473847347383483"));

	// 测试比较
	bool test = a > u256(0);
	VF("comp 1", test);
	test = a > u256("1419858");
	VF("comp 2", !test);
	test = a >= a;
	VF("comp 3", test);
	test = a1 <= a1;
	VF("comp 4", test);
	test = a == a;
	VF("comp 5", test);
	test = a2 < a1;
	VF("comp 6", test);
	test = a2 != u256(0);
	VF("comp 7", test);

	// 测试移位
	u256 a3;
	a3 = a1;
	a3 <<= 2;
	VF("shift left2", a3 == string("18297594339942955738348"));
	a3 = a1 << 9;
	VF("shift left9", a3 == string("2342092075512698334508544"));

	a3 = a1;
	a3 >>= 3;
	VF("shift right3", a3 == string("571799823123217366823"));
	a3 = a1 >> 10;
	VF("shift right10", a3 == string("4467186118150135678"));

	a3 = a1 + a2;
	VF("add", a3.str() == string("4574426058833086318070"));
	a3 = a1 - a2;
	VF("sub", a3.str() == string("4574371111138391551104"));
	a3 = a1 * a2;
	VF("mul", a3.str() == string("125676328429985201753403742614541226521"));
	a3 = a1 / a2;
	VF("div", a3.str() == string("166500"));
	a3 = a1 / a1;
	VF("div1", a3 == 1);
	a3 = a1 % a2;
	VF("mod", a3.str() == string("3001646389015087"));
	a3 = a1 % a1;
	VF("mod1", a3 == 0);

	// 测试浮点转换
	long double ld = (long double)a;
	VF("convert long double", ld == 1419857.0);
	long double d = (long double)a;
	VF("convert double", d == 1419857.0);
	long double f = (float)a;
	VF("convert float", d == 1419857.0);

	a = (long double)3141592.6;
	VF("convert double1", a == 3141592);

	unsigned char _N[32] = { 0x41, 0x41, 0x36, 0xd0, 0x8c, 0x5e, 0xd2, 0xbf, 0x3b, 0xa0, 0x48, 0xaf, 0xe6, 0xdc, 0xae, 0xba, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
	unsigned char _round[15][32] =
	{
		// 第一轮：
		{ 0x5b, 0x07, 0x8b, 0xd4, 0x47, 0xb1, 0xd9, 0xd7, 0xca, 0xb2, 0xeb, 0xe9, 0x9d, 0xa5, 0xf4, 0xdf, 0x0f, 0x3e, 0x59, 0xd7, 0xcd, 0xdd, 0x60, 0x50, 0x64, 0x68, 0x7e, 0x8b, 0xce, 0xbf, 0xe7, 0x57, },
		{ 0x23, 0xa4, 0x2a, 0x4f, 0xb0, 0x56, 0x59, 0x62, 0xc3, 0xe1, 0x01, 0x08, 0x1f, 0xcf, 0x31, 0xfc, 0xac, 0xb8, 0xd4, 0xbc, 0xf8, 0xb9, 0x16, 0x9b, 0x41, 0x36, 0x54, 0xd4, 0x0d, 0x1e, 0xd9, 0x45, },
		{ 0x7e, 0xab, 0xb5, 0x23, 0xf8, 0x07, 0x33, 0x3a, 0x8e, 0x94, 0xed, 0xf1, 0xbc, 0x74, 0x26, 0xdc, 0xbc, 0xf6, 0x2d, 0x94, 0xc6, 0x97, 0x77, 0xeb, 0xa5, 0x9e, 0xd2, 0x5f, 0xdc, 0xdd, 0xc0, 0x9d, },
		// 第二轮：
		{ 0x76, 0xec, 0x0c, 0x3b, 0xff, 0xa9, 0x45, 0x9c, 0x2b, 0x3f, 0xf2, 0x1f, 0x4f, 0x58, 0x6b, 0x96, 0x6a, 0x58, 0xcd, 0x23, 0xf1, 0xf7, 0x73, 0xc1, 0x8d, 0x36, 0xbe, 0x93, 0x99, 0x08, 0x74, 0x2e, },
		{ 0x7e, 0xab, 0xb5, 0x23, 0xf8, 0x07, 0x33, 0x3a, 0x8e, 0x94, 0xed, 0xf1, 0xbc, 0x74, 0x26, 0xdc, 0xbc, 0xf6, 0x2d, 0x94, 0xc6, 0x97, 0x77, 0xeb, 0xa5, 0x9e, 0xd2, 0x5f, 0xdc, 0xdd, 0xc0, 0x9d, },
		{ 0xf4, 0x97, 0xc2, 0x5e, 0xf7, 0xb1, 0x78, 0xd6, 0xb9, 0xd3, 0xdf, 0x11, 0x0c, 0xcd, 0x91, 0x72, 0x27, 0x4f, 0xfb, 0xb7, 0xb7, 0x8f, 0xeb, 0xac, 0x33, 0xd5, 0x90, 0xf3, 0x75, 0xe6, 0x34, 0xcc, },
		// 第三轮：
		{ 0x77, 0x33, 0x1e, 0x4e, 0x98, 0x1d, 0x62, 0x26, 0x49, 0x39, 0xf5, 0x9e, 0x1d, 0x79, 0xdb, 0x57, 0xe6, 0x98, 0x18, 0xe2, 0x4f, 0xd8, 0x57, 0xf6, 0x5b, 0x40, 0x58, 0x00, 0x4b, 0xad, 0x73, 0xc7, },
		{ 0xf4, 0x97, 0xc2, 0x5e, 0xf7, 0xb1, 0x78, 0xd6, 0xb9, 0xd3, 0xdf, 0x11, 0x0c, 0xcd, 0x91, 0x72, 0x27, 0x4f, 0xfb, 0xb7, 0xb7, 0x8f, 0xeb, 0xac, 0x33, 0xd5, 0x90, 0xf3, 0x75, 0xe6, 0x34, 0xcc, },
		{ 0x2a, 0x8a, 0xaa, 0xdc, 0x02, 0x71, 0x08, 0x3d, 0xc7, 0x6c, 0x8c, 0x01, 0x43, 0x69, 0xbe, 0x0f, 0x0f, 0xe8, 0x13, 0x9a, 0x07, 0x68, 0x43, 0xa3, 0x8f, 0x15, 0xe9, 0xf3, 0xc0, 0x93, 0xa8, 0x93, },
		// 第四轮：
		{ 0x60, 0xcb, 0x0c, 0x9b, 0xee, 0x56, 0xb5, 0xe5, 0xac, 0xbf, 0x77, 0x36, 0xd8, 0xca, 0x5d, 0xad, 0x9d, 0xe6, 0xfc, 0xc3, 0xba, 0x9b, 0x90, 0x07, 0xb4, 0xff, 0xad, 0x54, 0xf6, 0xd0, 0x17, 0x2d, },
		{ 0x2a, 0x8a, 0xaa, 0xdc, 0x02, 0x71, 0x08, 0x3d, 0xc7, 0x6c, 0x8c, 0x01, 0x43, 0x69, 0xbe, 0x0f, 0x0f, 0xe8, 0x13, 0x9a, 0x07, 0x68, 0x43, 0xa3, 0x8f, 0x15, 0xe9, 0xf3, 0xc0, 0x93, 0xa8, 0x93, },
		{ 0x8a, 0x55, 0xb7, 0x77, 0xf1, 0xc7, 0xbd, 0x22, 0x74, 0x2c, 0x04, 0x38, 0x1b, 0x34, 0x1c, 0xbd, 0xac, 0xce, 0x10, 0x5e, 0xc2, 0x03, 0xd4, 0xaa, 0x43, 0x15, 0x97, 0x48, 0xb7, 0x64, 0xc0, 0xc0, },
		// 第五轮：
		{ 0x6d, 0x6c, 0xdf, 0x22, 0x0e, 0xa1, 0x28, 0x10, 0xca, 0xad, 0xe8, 0x2a, 0x29, 0xe0, 0xf6, 0xdf, 0x87, 0x07, 0x82, 0x55, 0xfd, 0x61, 0x8b, 0x51, 0xe0, 0x58, 0x74, 0x8b, 0x8d, 0xbd, 0xda, 0x4e, },
		{ 0x8a, 0x55, 0xb7, 0x77, 0xf1, 0xc7, 0xbd, 0x22, 0x74, 0x2c, 0x04, 0x38, 0x1b, 0x34, 0x1c, 0xbd, 0xac, 0xce, 0x10, 0x5e, 0xc2, 0x03, 0xd4, 0xaa, 0x43, 0x15, 0x97, 0x48, 0xb7, 0x64, 0xc0, 0xc0, },
		{ 0xb6, 0x80, 0x60, 0xca, 0x72, 0x0a, 0x14, 0x73, 0x02, 0x3a, 0xa4, 0xb3, 0x5d, 0x37, 0x64, 0xe2, 0x35, 0xd6, 0x92, 0xb3, 0xbf, 0x65, 0x5f, 0xfc, 0x23, 0x6e, 0x0b, 0xd4, 0x44, 0x22, 0x9b, 0x0f, },
	};

	u256 N(_N);
	for (int i = 0; i < 5; i++)
	{
		u256 A(_round[i * 3 + 0]);
		u256 B(_round[i * 3 + 1]);
		u256 R(_round[i * 3 + 2]);

		u256 C = (A + B);
		C = C.mod(N);
		VF("yufeng test", C == R);
	}

	// 找到一个比 a 大的质数
	a = string("234809238464");
	while (!fermat(a))
	{
		a = a + (u256)1;
		//printf("%s\n", a.str().c_str());
	}
	VF("fermat", a == string("234809238467"));

	//  显示 1000 以内的质数
	int n = 0;
	for (int i=5;i<1000;i++)
	{
		if (fermat(i))
		{
			printf("%d ", i);
			n++;
		}
	}
	printf("\n");
	VF("prime", n == 164);

	// 计算阶乘
	a = factorial(20);
	VF("factorial", a == string("2432902008176640000"));

	// 10000 次除法的平均时间
	int bt, et, nt = 0;
	a1 = string("4574398584985738934587");
	for (int j=0;j<10;j++)
	{
		bt = GetTickCount();
		for (int i=0;i<10000;i++)
			a3 = a1/a2;
		et = GetTickCount();
		nt = nt + (et - bt);
	}
	printf("%d\n", nt/10);
}
